//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "wm_sol_kline")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub created_at: Option<DateTime>,
    pub updated_at: Option<DateTime>,
    pub deleted_at: Option<DateTime>,
    #[sea_orm(primary_key, auto_increment = false)]
    pub mint: String,
    pub end_time: Option<DateTime>,
    #[sea_orm(column_type = "Double")]
    pub volume_token: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_sol: f64,
    #[sea_orm(column_type = "Double")]
    pub volume_usdt: f64,
    #[sea_orm(column_type = "Double")]
    pub h: f64,
    #[sea_orm(column_type = "Double")]
    pub o: f64,
    #[sea_orm(column_type = "Double")]
    pub l: f64,
    #[sea_orm(column_type = "Double")]
    pub c: f64,
    #[sea_orm(column_type = "Double")]
    pub sol_h: f64,
    #[sea_orm(column_type = "Double")]
    pub sol_o: f64,
    #[sea_orm(column_type = "Double")]
    pub sol_l: f64,
    #[sea_orm(column_type = "Double")]
    pub sol_c: f64,
    pub buy_count: i32,
    pub sell_count: i32,
    #[sea_orm(column_type = "Double")]
    pub buy_usdt: f64,
    #[sea_orm(column_type = "Double")]
    pub sell_usdt: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
